unfiltered tests (ascending)

multi-threaded test:
00000004	4.76648474	[13612] float std::stable_sort() test
00000005	4.76678181	[13612]          14122233442
00000008	5.15926266	[13612] float rsbd8::radixsortcopy() test
00000009	5.15931940	[13612]           1273957918
00000012	7.65556335	[13612] double std::stable_sort() test
00000013	7.65586567	[13612]           8644180680
00000016	8.17956257	[13612] double rsbd8::radixsortcopy() test
00000017	8.17960548	[13612]           1705320300
00000020	10.66683388	[13612] uint64_t std::stable_sort() test
00000021	10.66689110	[13612]           8612819248
00000024	11.20046139	[13612] uint64_t rsbd8::radixsortcopy() test
00000025	11.20051765	[13612]           1757089446
00000028	13.66427517	[13612] int64_t std::stable_sort() test
00000029	13.66457462	[13612]           8531406181
00000032	14.20116329	[13612] int64_t rsbd8::radixsortcopy() test
00000033	14.20121574	[13612]           1759966342

relative factor (reference/custom):
   float: 11.08532
  double: 5.068948
uint64_t: 4.901753
 int64_t: 4.847483


single-threaded test:
00000004	4.79325056	[9304] float std::stable_sort() test
00000005	4.79336166	[9304]          14053540382
00000012	5.55951929	[9304] float rsbd8::radixsortcopy() test
00000013	5.55957270	[9304]           1240555668
00000016	8.09368229	[9304] double std::stable_sort() test
00000017	8.09373379	[9304]           8776273642
00000024	9.10072231	[9304] double rsbd8::radixsortcopy() test
00000025	9.10078621	[9304]           1666674518
00000028	11.56442547	[9304] uint64_t std::stable_sort() test
00000029	11.56454277	[9304]           8528786684
00000036	12.58009529	[9304] uint64_t rsbd8::radixsortcopy() test
00000037	12.58015156	[9304]           1673378966
00000040	15.03369141	[9304] int64_t std::stable_sort() test
00000041	15.03381157	[9304]           8493300404
00000048	16.05014420	[9304] int64_t rsbd8::radixsortcopy() test
00000049	16.05020905	[9304]           1679044924

relative factor (reference/custom):
   float: 11.32842
  double: 5.265739
uint64_t: 5.096745
 int64_t: 5.058412


This test was valuable. Even though a x64 processor has plenty of means to handle overlapping memory writes (without true contention on a memory resource), sharing the occasional 64-byte cache line is costly. Radix sort is a memory bandwidth limited algorithm. Multiprocessing in this way just isn't worth investing in.



as a bonus, filtered tests (descending for all radix sort, tiered-absolute filter for signed types)

multi-threaded test:
00000004	4.83237886	[13896] float std::stable_sort() test
00000005	4.83266640	[13896]          14288406836
00000008	5.25481033	[13896] float rsbd8::radixsortcopy<rsbd8::decendingreverseordered, rsbd8::nativetieredabsmode>() test
00000009	5.25483942	[13896]           1346942844
00000012	7.94371700	[13896] double std::stable_sort() test
00000013	7.94401932	[13896]           9306186412
00000016	8.47734356	[13896] double rsbd8::radixsortcopy<rsbd8::decendingreverseordered, rsbd8::nativetieredabsmode>() test
00000017	8.47740173	[13896]           1768845334
00000020	10.95421314	[13896] uint64_t std::stable_sort() test
00000021	10.95427322	[13896]           8579108946
00000024	11.49172497	[13896] uint64_t rsbd8::radixsortcopy<rsbd8::decendingreverseordered, rsbd8::nativetieredabsmode>() test
00000025	11.49175262	[13896]           1766956226
00000028	13.94257736	[13896] int64_t std::stable_sort() test
00000029	13.94276142	[13896]           8487828810
00000032	14.47580624	[13896] int64_t rsbd8::radixsortcopy<rsbd8::decendingreverseordered, rsbd8::nativetieredabsmode>() test
00000033	14.47583389	[13896]           1758436490

relative factor (reference/custom):
   float: 10.60803
  double: 5.261165
uint64_t: 4.855304
 int64_t: 4.826918


single-threaded test:
00000004	4.75333118	[11880] float std::stable_sort() test
00000005	4.75344467	[11880]          14242186586
00000012	5.54244280	[11880] float rsbd8::radixsortcopy<rsbd8::decendingreverseordered, rsbd8::nativetieredabsmode>() test
00000013	5.54249668	[11880]           1324960934
00000016	8.09524441	[11880] double std::stable_sort() test
00000017	8.09530354	[11880]           8832521172
00000024	9.11365795	[11880] double rsbd8::radixsortcopy<rsbd8::decendingreverseordered, rsbd8::nativetieredabsmode>() test
00000025	9.11371326	[11880]           1697590968
00000028	11.61964226	[11880] uint64_t std::stable_sort() test
00000029	11.61975956	[11880]           8677502050
00000036	12.63356209	[11880] uint64_t rsbd8::radixsortcopy<rsbd8::decendingreverseordered, rsbd8::nativetieredabsmode>() test
00000037	12.63362026	[11880]           1671645892
00000040	15.09289455	[11880] int64_t std::stable_sort() test
00000041	15.09301090	[11880]           8514654570
00000048	16.11000061	[11880] int64_t rsbd8::radixsortcopy<rsbd8::decendingreverseordered, rsbd8::nativetieredabsmode>() test
00000049	16.11005402	[11880]           1677599478

relative factor (reference/custom):
   float: 10.74914
  double: 5.202974
uint64_t: 5.190993
 int64_t: 5.075499


This test highlights that a little bit of filtering will impact the scores. However, it's just 1% that this particular mode in high-low split multi-threading on x64 wins over the straightforward single-threaded mode for doubles, and fails to be faster in all other modes. As a comparison: the early test versions (just for a few items) written in x64 assembly for this library were 4% to 7% faster than the regular functions on average. So again, multiprocessing in this way just isn't worth investing in.